Serial Support
--------------

The default DOS serial driver does not support speeds above 9600 baud. For 
higher speeds, a more capable serial driver (like ADF) must be used.


USB Support
-----------

USB is not supported.


Bluetooth Support
-----------------

Bluetooth is not supported.


Compiling
---------

The DOS version of BRLTTY can be compiled on Linux thanks to a cross-compiler. 
To create it, get the following archives:

   ftp://ftp.delorie.com/pub/djgpp/current/v2gnu/gcc410s2.zip
   ftp://ftp.delorie.com/pub/djgpp/current/v2/djcrx203.zip

The djcrx203.zip archive contains a file named cross/howto.32 which explains
how to build a cross-compiler for gcc 3.2. You can build one for gcc 4.1 by
applying the same instructions to the gcc410s2.zip archive (listed above)
instead of to the gcc32s2.zip archive (mentioned in the howto). You can also
use a more recent binutils package as well (2.2.24 works fine).

If, when building the cross-compiler, you encounter an error which complains 
that the writev function and the iovec structure have not been defined, then 
you need to upgrade to a newer version of djcrx. Upgrading to djcrx204 is 
sufficient. It can be downloaded from:

   ftp://ftp.delorie.com/pub/djgpp/beta/v2/djcrx204.zip

Another complexity when building the cross-compiler is that some parts of the 
process need an older version of autoconf (2.13) whereas other parts of it need 
a newer version (2.57). Also, the build works best when a specific version of 
automake (1.9.6) is used.

We've written a script which builds the cross-compiler, and which also takes 
care of all of the idiosyncracies that we encountered when doing so.


The mkdostools Script
---------------------

The mkdostools script builds the cross-compiler that you need in order to 
build BRLTTY for DOS on Linux. It resides in the DOS/ subdirectory of BRLTTY's 
source tree.

Its -h (help) option displays a brief usage summary. It's -v (verbose) option 
increases output verbosity, and its -q (quiet) option decreases output 
verbosity. The -v and -q options are complementary, and both are cumulative - 
each may be specified any number of times.

The script uses a number of directories during the build process. Each of these 
directories can be specified by an option, and defaults to a subdirectory of 
the one which contains the script itself. Each of the default subdirectories 
can be a symbolic link which points somewhere else. The directories are:

   Purpose   Option  Default
   archives    -a    Archives/
   build       -b    Build/
   install     -i    Tools/

The archives directory is the only one that you need to prepare. It needs to 
contain all of the archives that the script will need in order to build the 
cross-compiler. DJGPP archives require the .zip extension, and Gnu archives 
require the .tar.gz extension. See below for the archives that you will need.

The build directory will hold all of the files that are needed during the build 
process. The script will create it if it does not already exist. If it does 
already exist then it will be emptied at the start of the build process. It is 
also emptied at the end of the build process if the build is successful.

The install directory is where the cross-compiler file hierarchy will be 
installed. The script will create it if it does not already exist. If it does 
already exist then it will be emptied at the start of the build process.

You will need the following DJGPP archives:

   Archive Name  Download From
   djcrx204.zip  ftp://ftp.delorie.com/pub/djgpp/beta/v2
   gcc432s2.zip  ftp://ftp.delorie.com/pub/djgpp/current/v2gnu

You will need the following Gnu archives:

   Archive Name           Download From
   autoconf-2.13.tar.gz   http://ftp.gnu.org/gnu/autoconf
   autoconf-2.57.tar.gz   http://ftp.gnu.org/gnu/autoconf
   automake-1.9.6.tar.gz  http://ftp.gnu.org/gnu/automake
   binutils-2.24.tar.gz   http://ftp.gnu.org/gnu/binutils
   gcc-4.3.2.tar.gz       http://gcc.gnu.org/mirrors.html

If you would prefer to build a different version of gcc, there are two 
important things to know. One is that you need the gcc*s2.zip archives from 
DJGPP. The other is that the versions of the Gnu and DJGPP archive must match. 
If, for example, you would like to build gcc-4.1.2, then you will need both 
gcc-4.1.2.tar.gz and gcc412s2.zip. The reason we use gcc-4.3.2 in our examples 
here is because it's the highest version of gcc for which we could find an 
s2.zip DJGPP archive.

If you only have one Gnu archive for gcc in your archives directory then that 
version will be built. If you have more than one, then you will need to use the 
-g option (e.g. -g 4.3.2) in order to tell the script which of the available 
versions you would like it to build.


Configuring
-----------

Before configuring BRLTTY, you must add the bin subdirectory of the 
cross-compiler's installed file hierarchy to your command search path. If, for 
example, the cross-compiler is installed in /usr/local/dostools, then add it to 
your command search path with a command like this:

   export PATH=/usr/local/dostools/bin:$PATH

You will also need to ensure that gcc's -fgnu89-inline option is used. This is 
done by setting the CFLAGS environment variable before configuring. For 
example:

   export CFLAGS="-fgnu89-inline"

You should be able to use a configure command like this one:

   ./configure \
      --prefix=/brltty-dos --host=i586-pc-msdosdjgpp \
      --disable-api --disable-icu --disable-x \
      --without-usb-package --without-bluetooth-package \
      --without-libbraille --with-braille-driver=-vr,all \
      --without-espeak --without-flite \
      --without-speechd --with-speech-driver=all \
      --with-screen-driver=pb,-all

We provide a script named cfg-dos, which can be found in the top-level 
directory of BRLTTY's source tree, that should make configuring BRLTTY for DOS 
a bit easier. It runs the configure script for you, and gives it all of the 
required options. You can specify additional configure options simply by giving 
them to cfg-dos, but that shouldn't be necessary. The only thing you do need to 
do is to point the DOS_TOOLS_ROOT environment variable to the top-level 
directory of your cross-compiler's installed file hierarchy. For example:

   export DOS_TOOLS_ROOT=/usr/local/dostools


DOSIDLE
-------

DOSIDLE is a DOS application which many users run in order to stop their 
computer or virtual machine from consuming CPU time when DOS has nothing 
meaningful for it to do. If you use it, don't use a cooling strategy more 
invasive than weak. In other words, don't specify more than -fm1. Doing so will 
cause DOSIDLE to correctly deduce that the system is idle when BRLTTY has 
nothing to do, but that will cause BRLTTY to stop running, too, which is not 
what you want.


