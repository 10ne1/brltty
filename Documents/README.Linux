~~~~~~~~~~~~~~~
BRLTTY on Linux
~~~~~~~~~~~~~~~

.. include:: prologue.rst

.. |super user| replace:: ``root``
.. |default user| replace:: ``brltty``

.. |sockets directory name| replace:: ``BrlAPI``
.. |updatable directory name| replace:: ``brltty``
.. |writable directory name| replace:: ``brltty``

.. |configuration file path| replace:: ``/etc/brltty.conf``
.. |sockets directory path| replace:: ``/var/lib/BrlAPI/``
.. |updatable directory path| replace:: ``/var/lib/brltty/``
.. |writable directory path| replace:: ``/var/run/brltty/``

.. |default unprivileged user| replace:: default unprivileged user (|default user|)
.. |unprivileged user option| replace:: ``-u`` (``--unprivileged-user=``) command line option

.. |speaker| replace:: built-in PC speaker
.. |uinput device| replace:: ``uinput`` device (``/dev/uinput`` or ``/dev/input/uinput``)

.. |sockets directory| replace:: sockets directory (usually |sockets directory path|)
.. |updatable directory| replace:: updatable directory (usually |updatable directory path|)
.. |writable directory| replace:: writable directory (usually |writable directory path|)

.. |keyboard key tables| replace::
  keyboard key tables
  (which allow keyboard key combinations to be bound
  to BRLTTY's navigation and configuration commands)

.. |cap_setuid| replace:: *cap_setuid*
.. |cap_setgid| replace:: *cap_setgid*
.. |cap_chown| replace:: *cap_chown*
.. |cap_fowner| replace:: *cap_fowner*
.. |cap_dac_override| replace:: *cap_dac_override*
.. |cap_sys_module| replace:: *cap_sys_module*
.. |cap_sys_admin| replace:: **cap_sys_admin**
.. |cap_sys_tty_config| replace:: **cap_sys_tty_config**
.. |cap_mknod| replace:: **cap_mknod**

.. |cap_setuid reason| replace:: switching to the |default unprivileged user|
.. |cap_setgid reason| replace:: switching to the writable group and joining required groups
.. |cap_chown reason| replace:: claiming group ownership of the `state directories`_
.. |cap_fowner reason| replace:: adding group permissions to the `state directories`_
.. |cap_dac_override reason| replace:: creating missing `state directories`_
.. |cap_sys_module reason| replace:: installing kernel modules
.. |cap_sys_admin reason| replace:: injecting input characters
.. |cap_sys_tty_config reason| replace:: using the |speaker|
.. |cap_mknod reason| replace:: creating special device files

For System Administrators
=========================

State Directories
-----------------

A state directory is one which a program needs to be able to write data to.
BRLTTY's state directories are:

|sockets directory|
  This directory is where BRLTTY creates BrlAPI's
  local (UNIX domain) server sockets.

|updatable directory|
  This directory is where BRLTTY saves user data.
  This includes:

  * preferences files
  * clipboard content

|writable directory|
  This directory is where BRLTTY creates private copies of
  file system objects that it needs but
  that don't already exist (or, at least, that it can't find),
  or that are inaccessible (can't be opened).
  It's also where, if requested, the speech FIFO is created.

The actual locations of these directories can be specified in a number of ways.
From highest to lowest precedence, they are:

* command line option
* configuration directive (in |configuration file path|)
* environment variable (if the ``-E`` command line option has been specified)
* default location (can be changed with ``configure`` at build time)

.. table:: State Directory Location Specification

  =========  ======  ===================  ==========================  ==========================
  Directory  Option  Config Directive     Environment Variable        Default Location
  ---------  ------  -------------------  --------------------------  --------------------------
  Sockets                                                             |sockets directory path|
  Updatable  -U      updatable-directory  BRLTTY_UPDATABLE_DIRECTORY  |updatable directory path|
  Writable   -W      writable-directory   BRLTTY_WRITABLE_DIRECTORY   |writable directory path|
  =========  ======  ===================  ==========================  ==========================

After having successfully switched to executing as an unprivileged user,
BRLTTY attempts to gain full access to its data directories.
For each of its state directories:

* If it doesn't exist then it's created.
  This requires the |cap_dac_override| (temporary) capability.

* Its owning group is changed to be the primary group
  of the unprivileged user that BRLTTY Is executing as.
  This same change is also made to whatever the directory contains.
  This requires the |cap_chown| (temporary) capability.

* Group read and write permissions are added to it
  and to whatever it contains.
  For directories, group search permission is also added
  and the set-group-ID bit is set.
  This requires the |cap_fowner| (temporary) capability.

As a protection, given that command line options, etc
can be used to change them to non-BRLTTY-specific locations,
attempts to gain full access to any of the state directories
are only performed if the last component of its path is its default name.

.. table:: Expected State Directory Names

  =========  ==========================
  Directory  Expected Name
  ---------  --------------------------
  Sockets    |sockets directory name|
  Updatable  |updatable directory name|
  Writable   |writable directory name|
  =========  ==========================

Starting BRLTTY
---------------

As the Super User
~~~~~~~~~~~~~~~~~

When BRLTTY starts executing as the super user (|super user|),
i.e. when its initial effective user identifier is 0,
it has unrestricted access to all of the privileged operations
that the host has to offer.
When started in this way, therefore, it first configures itself
to only have access to the `privileged host operations`_ that it actually needs,
and then drops the rest of them by becoming an unprivileged user process.

The steps that are performed to accomplish this are as follows:

1) Switch to executing as an unprivileged user process.
2) Install the needed `kernel modules`_.
3) Establish the needed `group memberships`_.
4) Assign to itself its `required capabilities`_.
5) Relinquish all of the other capabilities.

The decision regarding which regular user to run as is made as follows:

1) If the |unprivileged user option| has been supplied then:

   * Run as the specified user if it exists.
   * Stop with a nonzero exit status if it doesn't exist.

2) Run as the |default unprivileged user| if it exists.

3) Continue to run as |super user|.

As an Unprivileged User
~~~~~~~~~~~~~~~~~~~~~~~

When BRLTTY starts executing as an unprivileged user (not |super user|),
i.e. when its initial effective user identifier isn't 0,
it "hopes" that
the system,
the user who started it,
and its executable
have all been adequately configured.
While BRLTTY will continue to run in spite of inadequate host configuration,
its individual components will likely fail.
These failures can range all the way from minor to severe.

* Adequate system configuration means that
  all of the needed `kernel modules`_ have already been installed.
  This isn't necessary if the (temporary) capability
  |cap_sys_module| has also been assigned to BRLTTY's executable.

* Adequate user configuration means that the user who started BRLTTY
  has all of the needed `group memberships`_.
  This isn't necessary if the (temporary) capability
  |cap_setgid| has also been assigned to BRLTTY's executable.

* Adequate executable configuration means that
  all of the `required capabilities`_ have been assigned to it.

If the (temporary) capabilities |cap_setuid| and |cap_setgid|
have both also been assigned to BRLTTY's executable
then it's able to switch to its |default unprivileged user|
even when started as an unprivileged user.
If the |default unprivileged user| doesn't exist then
BRLTTY continues to run as the user who started it.
This feature doesn't allow an explicit user to be specified
(via the |unprivileged user option|).

Assigning Capabilities to the Executable
----------------------------------------

First, here's a summary of all of the capabilities that BRLTTY needs
when started `as an unprivileged user`_.

* The `required capabilities`_ are highlighted **this way**.
  They're needed throughout BRLTTY's execution.

* The `temporary capabilities`_ are highlighted *this way*.
  They're only needed when BRLTTY starts,
  and are relinquished when they're no longer needed.

.. table:: Capability Reasons

  ====================  ===========================
  Capability            Reason
  --------------------  ---------------------------
  |cap_setuid|          |cap_setuid reason|
  |cap_setgid|          |cap_setgid reason|
  |cap_chown|           |cap_chown reason|
  |cap_fowner|          |cap_fowner reason|
  |cap_dac_override|    |cap_dac_override reason|
  |cap_sys_module|      |cap_sys_module reason|
  |cap_sys_admin|       |cap_sys_admin reason|
  |cap_sys_tty_config|  |cap_sys_tty_config reason|
  |cap_mknod|           |cap_mknod reason|
  ====================  ===========================

The Command
~~~~~~~~~~~

The command to assign all of the capabilities,
i.e. both the `required capabilities`_ and the `temporary capabilities`_,
to BRLTTY's executable
so that it'll be fully functional when started as an unprivileged user,
without requiring any additional administrator configuration,
is::

  setcap cap_setuid,cap_setgid,cap_sys_module,cap_sys_admin,cap_sys_tty_config,cap_mknod+p /path/to/brltty

This command must be run as the super user (|super user|).

The ``setcaps`` Script
~~~~~~~~~~~~~~~~~~~~~~

The top-level directory of BRLTTY's source tree contains
a script named ``setcaps`` that simplifies the job of
assigning the needed capabilities to BRLTTY's executable.
Its default is to assign all of them.
For all of the details, run this command::

  setcaps -h

It requires one positional argument - the path to BRLTTY's executable.
It also accepts a number of options (which must precede that path).
In particular, these are the options that
remove capabilities from the full set.

.. table:: ``setcaps`` Script Options for Excluding Capabilities

  ======  ====================  ===========================
  Option  Capability            Reason
  ------  --------------------  ---------------------------
  -u      |cap_setuid|          |cap_setuid reason|
  -g      |cap_setgid|          |cap_setgid reason|
  -o      |cap_chown|           |cap_chown reason|
  -p      |cap_fowner|          |cap_fowner reason|
  -c      |cap_dac_override|    |cap_dac_override reason|
  -m      |cap_sys_module|      |cap_sys_module reason|
  -i      |cap_sys_admin|       |cap_sys_admin reason|
  -s      |cap_sys_tty_config|  |cap_sys_tty_config reason|
  -d      |cap_mknod|           |cap_mknod reason|
  ======  ====================  ===========================

Privileged Host Operations
--------------------------

The privileged host operations that BRLTTY needs to be able to perform
in order to be fully functional are:

Kernel Modules
~~~~~~~~~~~~~~

BRLTTY relies on functionality provided by these kernel modules:

**pcspkr**
  For playing alert tunes via the |speaker|.

**uinput**
  For creating virtual devices via the |uinput device|.

Group Memberships
~~~~~~~~~~~~~~~~~

BRLTTY relies on file system and server (daemon) access
granted via membership in these groups:

**audio**
  For playing sound via the ALSA framework.

**dialout**
  For serial I/O via these ``/dev/`` devices:

  **ttyS<n>**
    Actual serial ports.

  **ttyACM<n>**
    USB to serial adapters that implement the CDC ACM standard.

  **ttyUSB<n>**
    Other USB to serial adapters.

**input**
  For monitoring keyboard input via the devices in ``/dev/input/``.
  This capability is used to support |keyboard key tables|.

**pulse-access**
  For playing sound via the Pulse Audio daemon.

**root**
  Note that this is the ``root`` group - not the ``root`` user.
  It's used for:

  * USB I/O via ``USBFS`` (using the devices in ``/dev/bus/usb/``).

  * Creating virtual devices via the |uinput device|.

**tty**
  * For reading screen content via the ``/dev/vcs`` devices.

  * For virtual console monitoring and control via the ``/dev/tty<n>`` devices.

Required Capabilities
~~~~~~~~~~~~~~~~~~~~~

BRLTTY uses the privileged kernel operations
that are granted via these capabilities
throughout its execution.
They are retained within its ``permitted`` and ``effective`` sets,
but not within its ``inheritable`` and ``ambient`` sets.
In other words, they're for BRLTTY itself
and aren't passed along to any host command that it may invoke.

|cap_mknod|
  For creating needed but missing special device files.

|cap_sys_admin|
  For using ``TIOCSTI`` to inject input characters typed on a braille device.

|cap_sys_tty_config|
  For using ``KDMKTONE`` and ``KIOCSOUND`` to play alert tunes via the |speaker|.

Temporary Capabilities
~~~~~~~~~~~~~~~~~~~~~~

BRLTTY only uses the privileged kernel operations
that are granted via these capabilities
when it starts `as an unprivileged user`_.
They allow it to configure itself,
thus not relying so heavily on explicit administrator configuration,
and are relinquished right after this has been done.

|cap_chown|
  If this capability has also been assigned to BRLTTY's executable
  then it can claim group ownership of its `state directories`_
  after having successfully switched to executing as an unprivileged user.
  The primary group of that user is used.

|cap_fowner|
  If this capability has also been assigned to BRLTTY's executable
  then it can add group permissions to its `state directories`_
  after having successfully switched to executing as an unprivileged user.
  Both read and write group permissions are added to all files and directories.
  In addition, for all directories,
  group search permission is added
  and the set-group-ID bit is set.

|cap_dac_override|
  If this capability has also been assigned to BRLTTY's executable
  then it can create missing `state directories`_
  after having successfully switched to executing as an unprivileged user.

|cap_setgid|
  If this capability has also been assigned to BRLTTY's executable
  then it ignores the invoking user's group memberships
  and internally establish the actually needed `group memberships`_.

|cap_setuid|
  If this capability has also been assigned to BRLTTY's executable
  then it can switch to the |default unprivileged user|.
  The |cap_setgid| (temporary) capability is also required
  so that it can also switch to that user's primary group.
  This feature doesn't allow switching to an explicit user
  (via the |unprivileged user option|).

|cap_sys_module|
  If this capability has also been assigned to BRLTTY's executable
  then the needed `kernel modules`_ needn't have been already installed
  because they can be internally installed.

Known Problems
--------------

Writing to SYSFS Files
~~~~~~~~~~~~~~~~~~~~~~

The ``SYSFS`` virtual file system (usually mounted at ``/sys/``)
contains some files that BRLTTY occasionally needs to write to.
While they can be read by anyone,
they can only be written to by the super user (|super user|).
These problems haven't been resolved yet.
They include:

* Disabling USB autosuspend.
  Some USB-connected braille devices don't respond very well
  to being automatically suspended by the kernel.
  In these cases, BRLTTY disables the feature
  by writing to the ``power/autosuspend`` file
  of the associated PCI device.

Creating Virtual Devices via Uinput
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The |uinput device| is usually only readable and writable
by the super user (|super user|).
Without any group and/or others access,
it's impossible for BRLTTY to access it
when started `as an unprivileged user`_.

This situation could be easily resolved
by granting group read and write permissions to the device.
This shouldn't be problematic because its owned by the ``root`` group.
Even better, of course, would be to also give the device its own group
(e.g. ``uinput``).

BRLTTY currently gets around this problem by including the following
Udev rule to add group read and write permissions to the device::

  KERNEL=="uinput", ACTION=="add", MODE="0660"

If BRLTTY finds that it isn't permitted to open the device
(perhaps because the Udev rule isn't present)
then its fallback method Is to create a private copy of the device file
within its |writable directory|.
This requires the |cap_mknod| (temporary) capability.

Other alternatives include:

* Adding the ``cap_dac_override`` (permanent) capability
  so that BRLTTY isn't subject to file ownership restrictions.
  This is a very, very bad idea
  but, for completeness, it's on the table.

* Adding the ``cap_fowner`` (temporary) capability
  so that BRLTTY can add an acl (access control list) entry
  that grants itself access to the device.

* Adding the ``cap_fowner`` (temporary) capability
  so that BRLTTY can add group read and write permissions to the device.

Being able to create virtual devices
is a very important ability for BRLTTY to have.
It's used for:

* Creating a virtual keyboard in order to
  forward those keyboard events (key presses and releases)
  that haven't been claimed by bindings within |keyboard key tables|
  back to the system.

* Creating a virtual keyboard in order to inject simulated typing. 
  This is done to support the typing of
  arbitrary combinations of modifier keys (shift, control, alt, etc),
  in combination (or not) with any character(s) and/or special key(s),
  on the keyboard of a braille device.
  The fallback interface - ``TIOCSTI`` - only provides character injection,
  which means that it can only support the typing of individual characters
  and the pressing of only those special keys
  that can be emulated by well-known escape sequences.

* Creating a virtual sound device in order to
  watch for tones sent to the |speaker|.
  This is done to support the redirection of these tones
  to the PCM interface of a sound card.
  While sighted users seem to be content with not hearing these tones
  on a computer that doesn't have a |speaker|,
  most blind users rely on being able to hear them.
  For example, a blind person can't see a visual bell.

* Creating a virtual LED device in order to
  monitor what the keyboard LEDs are showing.
  This is done to support the generation of
  An audio-based rendering of LED state changes.

Private Copies of Device Files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The default location of the |writable directory| on a modern system
is usually on a memory-resident file system
that has been mounted with the ``nodev`` option.
This prevents any device file within the file system from being opened
even if its permissions (mode, acl, etc) allow it.
The good news is that this isn't really a problem
on a well-configured system.
If it is then the best solution is
to change the writable directory to a better location
(see `State Directories`_ for how to do that).

