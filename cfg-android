#!/bin/bash
###############################################################################
# BRLTTY - A background process providing access to the console screen (when in
#          text mode) for a blind person using a refreshable braille display.
#
# Copyright (C) 1995-2021 by The BRLTTY Developers.
#
# BRLTTY comes with ABSOLUTELY NO WARRANTY.
#
# This is free software, placed under the terms of the
# GNU Lesser General Public License, as published by the Free Software
# Foundation; either version 2.1 of the License, or (at your option) any
# later version. Please see the file LICENSE-LGPL for details.
#
# Web Page: http://brltty.app/
#
# This software is maintained by Dave Mielke <dave@mielke.cc>.
###############################################################################

. "`dirname "${0}"`/brltty-prologue.sh"
set -e

parseProgramArguments "${@}"

sourceRoot="${programDirectory}"
buildRoot="${initialDirectory}"

androidRoot="${buildRoot}/Android"
ndkRoot="${androidRoot}/NDK"

[ -d "${ndkRoot}" ] || {
   [ -n "${ANDROID_NDK}" ] || {
      semanticError "Android NDK directory not defined: ${ndkRoot}"
   }

   [  -f "${ANDROID_NDK}/ndk-build" ] || {
      semanticError "not an Android NDK: ${ANDROID_NDK}"
   }

   programMessage "creating symbolic link: ${ndkRoot} -> ${ANDROID_NDK}"
   ln -s "${ANDROID_NDK}" "${ndkRoot}" || exit "${?}"
}

architecturesRoot="${androidRoot}/ABI"
androidPlatform=android-21

prepareArchitecture() {
   local architecture="${1}"
   local system="${2}"
   local abi="${3}"
   local cFlags="${4}"
   local ldFlags="${5}"

   local abiRoot="${architecturesRoot}/${abi}"
   mkdir -p -- "${abiRoot}"
   local toolchainRoot="${abiRoot}/ToolChain"

   [ -d "${toolchainRoot}" ] || {
      "${ndkRoot}/build/tools/make-standalone-toolchain.sh" \
         --platform="${androidPlatform}" \
         --arch="${architecture}" \
         --install-dir="${toolchainRoot}" || exit "${?}"

      local buildInclude="/usr/include"
      local hostInclude="${toolchainRoot}/sysroot${buildInclude}"

      local header
      for header in bluetooth
      do
         local hostHeader="${hostInclude}/${header}"
         [ ! -e "${hostHeader}" ] || continue

         local buildHeader="${buildInclude}/${header}"
         [ -e "${buildHeader}" ] || continue

         ln -s "${buildHeader}" "${hostHeader}" || exit "${?}"
      done
   }

   (  set -e
      cd "${abiRoot}"

      set -- SOURCE "${sourceRoot}" PLATFORM "${androidPlatform}" ARCH "${architecture}" ABI "${abi}" SYSTEM "${system}" TOOLCHAIN "${toolchainRoot}" CFLAGS "${cFlags}" LDFLAGS "${ldFlags}"
      local variablesFile="build.properties"
      : >"${variablesFile}"

      while [ "${#}" -gt 0 ]
      do
         local variable="${1}"
         local value="${2}"
         shift 2
         echo >>"${variablesFile}" "BRLTTY_ANDROID_${variable}=${value}"
      done
   )
}

prepareArchitecture arm arm-linux-androideabi armeabi-v7a "-mthumb" "-Wl,--fix-cortex-a8"
prepareArchitecture arm64 aarch64-linux-android arm64-v8a
prepareArchitecture x86 i686-linux-android x86
prepareArchitecture x86_64 x86_64-linux-android x86_64

"${sourceRoot}/cfg-android-abi" "armeabi-v7a"
exit 0
