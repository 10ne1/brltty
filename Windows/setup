#!/bin/bash -p
###############################################################################
# BRLTTY - A background process providing access to the console screen (when in
#          text mode) for a blind person using a refreshable braille display.
#
# Copyright (C) 1995-2019 by The BRLTTY Developers.
#
# BRLTTY comes with ABSOLUTELY NO WARRANTY.
#
# This is free software, placed under the terms of the
# GNU Lesser General Public License, as published by the Free Software
# Foundation; either version 2.1 of the License, or (at your option) any
# later version. Please see the file LICENSE-LGPL for details.
#
# Web Page: http://brltty.app/
#
# This software is maintained by Dave Mielke <dave@mielke.cc>.
###############################################################################

# TO-DO
# more MSYS/MinGW requird packages
# AutoHotkey104805_Install.exe
# nsis-3.0b0-setup.exe
# Cython/
# fix the lines tagged with #restore

set -e
umask 022

verifyDirectory() {
   local path="${1}"

   [ -e "${path}" ] || semanticError "directory not found: ${path}"
   [ -d "${path}" ] || semanticError "not a directory: ${path}"
   [ -w "${path}" ] || semanticError "directory not writable: ${path}"
   [ -r "${path}" ] || semanticError "directory not readable: ${path}"
   [ -x "${path}" ] || semanticError "directory not searchable: ${path}"
}

executeCommand() {
   logMessage detail "executing command: ${*}"

   exitStatus=0
   "${@}" || exitStatus="${?}"

   [ "${exitStatus}" -eq 0 ] || logMessage warning "command failed: ${1}: exit status ${exitStatus}"
   return "${exitStatus}"
}

unpackArchive() {
   local path="${1}"

   case "${path}"
   in
      *.zip) set -- unzip -q;;
      *.tar.gz) set -- tar xfz;;
      *) semanticError "unsupported archive: ${path}";;
   esac

   executeCommand "${@}" "${path}"
}

downloadFile() {
   local source="${1}"
   local target="${2}"

   logMessage step "downloading file: ${source}"
   [ -z "${target}" ] && target="${source##*/}"
   executeCommand wget -q -O "${target}" "${urlArchiveRoot}/${source}"
}

havePath() {
   local path="${1}"

   [ -n "${path}" ] || return 1
   [ -e "${path}" ] || return 2
   return 0
}

installWindowsArchive() {
   local archive="${1}"
   local path="${2}"

   havePath "${path}" || {
      logMessage task "installing Windows archive: ${archive}"
      downloadFile "${archive}"

      local directory=archive
      executeCommand mkdir "${directory}"
      executeCommand cd "${directory}"

      unpackArchive "../${archive}"
      set -- *

      if [ "${#}" -eq 1 -a -d "${1}" ]
      then
         executeCommand mv "${1}" "${path}"
         executeCommand cd ..
         executeCommand rmdir "${directory}"
      else
         executeCommand cd ..
         executeCommand mv "${directory}" "${path}"
      fi
   }
}

installMingwArchive() {
   local archive="${1}"
   local path="${2}"

   havePath "${mingwDirectory}/${path}" || {
      logMessage task "installing MinGW archive: ${archive}"
      downloadFile "MinGW/${archive}"

      executeCommand cd "${mingwDirectory}"
      unpackArchive "${temporaryDirectory}/${archive}"
      executeCommand cd "${temporaryDirectory}"
   }
}

installMingwPackage() {
   local package="${1}"
   local path="${2}"

   havePath "${path}" || {
      logMessage task "installing MinGW package: ${package}"
      executeCommand mingw-get install "${package}"
   }
}

installMingwFile() {
   local file="${1}"
   local subdirectory="${2}"

   local directory="${subdirectory}"
   [ "${directory}" = "${directory#/}" ] && directory="${mingwDirectory}/${directory}"

   local source="${file##*/}"
   local target="${directory}/${source}"

   [ -e "${target}" ] || {
      logMessage task "installing MinGW file: ${subdirectory}/${source}"
      downloadFile "${file}"
      [ -d "${directory}" ] || executeCommand mkdir -p "${directory}"
      executeCommand cp "${source}" "${target}"
   }
}

installMingwLink() {
   local target="${1}"
   local directory="${2}"
   local name="${3}"

   [ -n "${name}" ] || name="${target##*/}"
   local source="${mingwDirectory}/${directory}/${name}"

   havePath "${source}" || {
      logMessage task "installing MinGW link: ${source} -> ${target}"
      [ -e "${target}" ] || semanticError "link target not found: ${target}"
      executeCommand ln -s "${target}" "${source}"
   }
}

installRequiredPackages() {
   installMingwPackage msys-wget /usr/bin/wget
   installMingwPackage msys-unzip /usr/bin/unzip
}

installMicrosoftVisualCTools() {
   local file

   for file in lib.exe link.exe mspdb100.dll msvcr100.dll
   do
      installMingwFile "MSVC/${file}" usr/local/bin #restore should be absolute
   done
}

installPackageConfigurationFiles() {
   local package

   for package in libusb libusb-1.0
   do
      installMingwFile "pkgconfig/${package}.pc" "lib/pkgconfig"
   done
}

installBluetoothHeaders() {
   local name

   for name in ws2bth bthdef bthsdpdef
   do
      installMingwFile "Bluetooth/${name}.h" include
   done
}

installICU() {
   installWindowsArchive icu4c-53_1-Win32-msvc10.zip "${windowsDirectory}/ICU"
}

installLibUSB0() {
   local directory="${windowsDirectory}/LibUSB-Win32"
   installWindowsArchive libusb-win32-bin-1.2.6.0.zip "${directory}"
   installMingwLink "${directory}/include/lusb0_usb.h" include usb.h
   installMingwLink "${directory}/lib/gcc/libusb.a" lib
   installMingwLink "${directory}/bin/x86/libusb0_x86.dll" bin libusb0.dll
}

installLibUSB1() {
   local directory="${windowsDirectory}/LibUSB-1.0"
   installWindowsArchive libusbx-1.0.18-win.tar.gz "${directory}"
   installMingwLink "${directory}/include/libusbx-1.0" include libusb-1.0
   installMingwLink "${directory}/MinGW32/dll/libusb-1.0.dll.a" lib
   installMingwLink "${directory}/MinGW32/dll/libusb-1.0.dll" bin
   installWindowsArchive winusb.zip "${windowsDirectory}/WinUSB"
}

. "`dirname "${0}"`/../prologue.sh"
#. "${programDirectory}/mingw.sh" #restore uncomment

urlArchiveRoot="http://brltty.app/archive/Windows"
windowsDirectory="/tmp/w" #restore should be /c
mingwDirectory="/tmp/m" #restore should be /mingw

commandsDirectory="${mingwDirectory}/bin"
librariesDirectory="${mingwDirectory}/lib"
headersDirectory="${mingwDirectory}/include"

defaultTemporaryDirectory="${TMPDIR:-/tmp}/brltty-${programName}"

addProgramOption k flag keepFiles "keep (do not remove) the temporary directory"
addProgramOption t string.directory temporaryDirectory "the temporary directory to use" "${defaultTemporaryDirectory}"
parseProgramArguments "${@}"

verifyDirectory "${windowsDirectory}"
verifyDirectory "${mingwDirectory}"
verifyDirectory "${commandsDirectory}"
verifyDirectory "${librariesDirectory}"
verifyDirectory "${headersDirectory}"

if [ -z "${temporaryDirectory}" ]
then
   temporaryDirectory="${defaultTemporaryDirectory}"
   rm -f -r "${temporaryDirectory}"
elif [ -e "${temporaryDirectory}" ]
then
   semanticError "directory already exists: ${temporaryDirectory}"
fi

mkdir -p "${temporaryDirectory}"
cd "${temporaryDirectory}"
temporaryDirectory="$(pwd -P)" #restore -P should be -W

installRequiredPackages
installMicrosoftVisualCTools
installPackageConfigurationFiles
installBluetoothHeaders

installMingwArchive pkg-config_0.28-1_win32.zip "bin/pkg-config.exe"
installMingwArchive glib_2.34.3-1_win32.zip "bin/libgobject-2.0-0.dll"

installICU
installLibUSB0
installLibUSB1

"${keepFiles}" || {
   logMessage task "cleaning up"
   cd "${initialDirectory}"
   rm -f -r "${temporaryDirectory}"
}

logMessage task "done"
exit 0
