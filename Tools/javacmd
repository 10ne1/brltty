#!/usr/bin/env -S java --source 11
/*
 * BRLTTY - A background process providing access to the console screen (when in
 *          text mode) for a blind person using a refreshable braille display.
 *
 * Copyright (C) 1995-2021 by The BRLTTY Developers.
 *
 * BRLTTY comes with ABSOLUTELY NO WARRANTY.
 *
 * This is free software, placed under the terms of the
 * GNU Lesser General Public License, as published by the Free Software
 * Foundation; either version 2.1 of the License, or (at your option) any
 * later version. Please see the file LICENSE-LGPL for details.
 *
 * Web Page: http://brltty.app/
 *
 * This software is maintained by Dave Mielke <dave@mielke.cc>.
 */

import java.io.File;
import java.util.Arrays;
import java.util.ArrayList;

public class ScriptImplementation extends ScriptHelper {
  public static String getJavaPath () {
    return ProcessHandle
          .current()
          .info()
          .command()
          .orElseThrow();
  }

  public static void main (String[] arguments) {
    var operands = new ScriptOperands(arguments);

    String action = operands.next();
    if (action == null) syntaxError("action not specified");

    switch (action) {
      case "jvmpath": {
        verifyNoMoreParameters(operands);
        putScriptOutput("%s", getJavaPath());
        break;
      }

      default: {
        syntaxError("unknown action: %s", action);
      }
    }
  }
}

public class ScriptHelper {
  public static String getScriptName () {
    String[] arguments = ProcessHandle.current().info().arguments().orElse(null);
    if (arguments == null) return null;

    final int index = 2;
    if (arguments.length <= index) return null;
    String path = arguments[index];
    return new File(path).getName();
  }

  public static void putScriptOutput (String format, Object... arguments) {
    System.out.println(String.format(format, arguments));
  }

  public static void putScriptMessage (String format, Object... arguments) {
    var stream = System.err;

    String name = getScriptName();
    if (name != null) stream.print(String.format("%s: ", name));

    stream.println(String.format(format, arguments));
  }

  public static void syntaxError (String format, Object... arguments) {
    putScriptMessage(format, arguments);
    System.exit(2);
  }

  public static void putTooManyParameters () {
    syntaxError("too many parameters");
  }

  public static void verifyNoMoreParameters (ScriptOperands operands) {
    if (!operands.isEmpty()) putTooManyParameters();
  }
}

public class ScriptOperands extends ArrayList<String> {
  public ScriptOperands (String... operands) {
    super(Arrays.asList(operands));
  }

  public String next () {
    return isEmpty()? null: remove(0);
  }
}
