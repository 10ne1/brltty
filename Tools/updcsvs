#!/usr/bin/env tclsh
###############################################################################
# BRLTTY - A background process providing access to the console screen (when in
#          text mode) for a blind person using a refreshable braille display.
#
# Copyright (C) 1995-2021 by The BRLTTY Developers.
#
# BRLTTY comes with ABSOLUTELY NO WARRANTY.
#
# This is free software, placed under the terms of the
# GNU Lesser General Public License, as published by the Free Software
# Foundation; either version 2.1 of the License, or (at your option) any
# later version. Please see the file LICENSE-LGPL for details.
#
# Web Page: http://brltty.app/
#
# This software is maintained by Dave Mielke <dave@mielke.cc>.
###############################################################################

source [file join [file dirname [info script]] .. prologue.tcl]
source [file join $scriptDirectory csv.tcl]

set optionDefinitions {
   {test      flag "don't update the files"}
}

processProgramArguments optionValues $optionDefinitions
cd [file join $sourceRoot $documentsSubdirectory]

array set tableHeaders {
   braille-driver {code name others aliases}
   speech-driver {code name comment aliases}
   screen-driver {code name usage}

   text-table {name description}
   contraction-table {name description}
   attributes-table {name description}
   keyboard-table {name description}
}

proc makeLists {file} {
   set lists [dict create]
   set pattern {^#(\w+-(?:driver|table))\s+([-\w]+)\s*#\s*(.*?)\s*$}

   forEachLine line $file {
      if {[regexp $pattern $line x directive operand comment]} {
         dict lappend lists [string tolower $directive] [linsert [lmap column [split $comment ";"] {string trim $column}] 0 $operand]
      }
   }

   return $lists
}

proc updateFile {name rows {width ""}} {
   upvar #0 optionValues(test) testMode
   set table [csvMakeTable $rows $width]

   if {![file exists $name]} {
      if {$testMode} {
         logMessage warning "test mode - file not created: $name"
      } else {
         logMessage warning "creating file: $name"
         writeFile $name $table
      }
   } elseif {![string equal $table [readFile $name]]} {
      if {$testMode} {
         logMessage notice "test mode - file not updated: $name"
      } else {
         logMessage notice "updating file: $name"
         replaceFile $name $table
      }
   } else {
      return 0
   }

   return 1
}

proc updateFiles {lists} {
   global tableHeaders
   set updated 0

   foreach type [dict keys $lists] {
      if {[info exists tableHeaders($type)]} {
         set headers $tableHeaders($type)

         if {[updateFile "$type.csv" [linsert [dict get $lists $type] 0 $headers] [llength $headers]]} {
            set updated 1
         }
      } else {
         logMessage warning "table headers not defined: $type"
      }
   }

   return $updated
}

if {![updateFiles [makeLists "brltty.conf.in"]]} {
   logMessage task "no files updated"
}

exit 0
