ext.nativeComponents = [:]

Map getABI (String abi) {
  if (!nativeComponents.containsKey("ABI")) {
    nativeComponents.ABI = [:]
  }

  def ABI = nativeComponents.ABI
  if (!ABI.containsKey(abi)) ABI[abi] = [:]
  return ABI[abi]
}

Map getABI (Map properties) {
  return getABI(properties.ABI)
}

String getProjectPath (Map properties) {
  return properties.project.projectDir.path
}

String getProjectPath (Map properties, String path) {
  return getProjectPath(properties) + File.separator + path
}

String getJarPath (Map properties) {
  return getProjectPath(properties, nativeProperties.jarPath)
}

String getJNIPath (Map properties) {
  return getProjectPath(properties, nativeProperties.jniPath)
}

String getABIPath (Map properties, String abi) {
  return getJNIPath(properties) + File.separator + abi
}

Task newConfigureTask (Map properties) {
  return tasks.register("configureNativeComponents${properties.taskNameSuffix}", Exec) {
    description "configure the ${properties.component} for the ${properties.ABI} ABI"

    workingDir properties.topDirectory
    ignoreExitValue false
    commandLine "${nativeProperties.rootDirectory}/cfg-android-abi", properties.ABI
  }.get()
}

Task getConfigureTask (Map properties) {
  def abi = getABI(properties)

  if (!abi.containsKey("configureTask")) {
    abi.configureTask = newConfigureTask(properties)
  }

  return abi.configureTask
}

Task newMakeTask (Map properties) {
  return tasks.register("makeNativeComponents${properties.taskNameSuffix}", Exec) {
    description "make the ${properties.ABI} components of the ${properties.component}"
    dependsOn properties.configureTask

    workingDir properties.makeDirectory
    ignoreExitValue false

    commandLine "make"
    args properties.make
  }.get()
}

Task newAddJarsTask (Map properties) {
  return tasks.register("jarNativeComponents${properties.taskNameSuffix}", Copy) {
    description "add the ${properties.component}'s ${properties.ABI} jars to the build"
    dependsOn properties.makeTask

    into getJarPath(properties)
    from properties.makeDirectory

    properties.jars.each { jar ->
      include "${jar}.jar"
    }
  }.get()
}

Task newAddLibrariesTask (Map properties) {
  return tasks.register("jniNativeComponents${properties.taskNameSuffix}", Copy) {
    description "add the ${properties.component}'s ${properties.ABI} libraries to the build"
    dependsOn properties.makeTask

    into getABIPath(properties, properties.ABI)
    from properties.makeDirectory

    properties.libs.each { library ->
      include "lib${library}.so"
    }
  }.get()
}

Task newCleanTask (Map properties) {
  return tasks.register("cleanNativeComponents${properties.taskNameSuffix}", Exec) {
    description "remove (make clean) the ${properties.ABI} components of the ${properties.component}"
    dependsOn properties.configureTask

    workingDir properties.makeDirectory
    ignoreExitValue true
    commandLine "make", "clean"
  }.get()
}

Task newRemoveJarsTask (Map properties) {
  return tasks.register("removeNativeComponents${properties.taskNameSuffix}", Delete) {
    description "remove the ${properties.component}'s jars from the build"
    delete getJarPath(properties)
  }.get()
}

Task newRemoveLibrariesTask (Map properties) {
  return tasks.register("removeNativeComponents${properties.taskNameSuffix}", Delete) {
    description "remove the ${properties.component}'s ${properties.ABI} libraries from the build"
    delete getABIPath(properties, properties.ABI)
  }.get()
}

Task newAssembleTask (Map properties) {
  return tasks.register("assembleNativeComponents${properties.taskNameSuffix}") {
    description "assemble all of the native components"
  }.get()
}

void addAssembleDependency (Task dependentTask) {
  nativeComponents.assembleTask.dependsOn dependentTask
}

void addNativeComponentTasks (Map properties, String abi) {
  properties.ABI = abi

  properties.topDirectory = nativeProperties.abiDirectory + File.separator + properties.ABI
  properties.configureTask = getConfigureTask(properties)

  properties.makeDirectory = properties.topDirectory + File.separator + properties.subdirectory
  properties.makeTask = newMakeTask(properties)

  def jars = properties.jars
  if ((jars != null) && !jars.isEmpty()) {
    def addJarsTask = newAddJarsTask(properties)
    addAssembleDependency addJarsTask
  }

  def libraries = properties.libs
  if ((libraries != null) && !libraries.isEmpty()) {
    def addLibrariesTask = newAddLibrariesTask(properties)
    addAssembleDependency addLibrariesTask
  }

  def cleanTask = newCleanTask(properties)
  clean.dependsOn cleanTask

  def removeLibrariesTask = newRemoveLibrariesTask(properties)
  clean.dependsOn removeLibrariesTask
}

void addNativeComponentTasks (Map properties) {
  def taskNameSuffix = "_${properties.component}"
  properties.taskNameSuffix = taskNameSuffix
  nativeComponents.assembleTask = newAssembleTask(properties)

  if (properties.make == null) properties.make = "all"
  if (properties.make instanceof String) properties.make = [properties.make]

  def removeJarsTask = newRemoveJarsTask(properties)
  clean.dependsOn removeJarsTask

  nativeProperties.abiList.each { abi ->
    properties.taskNameSuffix = "${taskNameSuffix}_${abi}"
    addNativeComponentTasks(properties, abi)
  }
}

def addTasks = { properties ->
  addNativeComponentTasks(properties)
}

nativeComponents.addTasks = addTasks
