String getProjectPath (Map properties) {
  return properties.project.projectDir.path
}

String getProjectPath (Map properties, String path) {
  return getProjectPath(properties) + File.separator + path
}

String getJarPath (Map properties) {
  return getProjectPath(properties, nativeProperties.jarPath)
}

String getJNIPath (Map properties) {
  return getProjectPath(properties, nativeProperties.jniPath)
}

String getABIPath (Map properties, String abi) {
  return getJNIPath(properties) + File.separator + abi
}

Task newConfigureTask (Map properties) {
  return tasks.register("configureNativeComponents${properties.taskNameSuffix}", Exec) {
    description "configure the ${properties.component} for the ${properties.ABI} ABI"

    workingDir properties.topDirectory
    ignoreExitValue false
    commandLine "${nativeProperties.rootDirectory}/cfg-android-abi", properties.ABI
  }.get()
}

Task newMakeTask (Map properties) {
  return tasks.register("makeNativeComponents${properties.taskNameSuffix}", Exec) {
    description "make the ${properties.ABI} components of the ${properties.component}"
    dependsOn properties.configureTask

    workingDir properties.makeDirectory
    ignoreExitValue false

    commandLine "make"
    args properties.make
  }.get()
}

Task newAddJarsTask (Map properties) {
  return null
}

Task newAddLibrariesTask (Map properties) {
  return null
}

Task newCleanTask (Map properties) {
  return tasks.register("cleanNativeComponents${properties.taskNameSuffix}", Exec) {
    description "remove (make clean) the ${properties.ABI} components of the ${properties.component}"
    dependsOn properties.configureTask

    workingDir properties.makeDirectory
    ignoreExitValue true
    commandLine "make", "clean"
  }.get()
}

Task newRemoveJarsTask (Map properties) {
  return null
}

Task newRemoveLibrariesTask (Map properties) {
  return null
}

void addCompileDependency (Task dependency) {
  tasks.withType(JavaCompile) { compileTask ->
    compileTask.dependsOn(dependency)
  }
}

void addNativeComponentTasks (Map properties, String abi) {
  properties.makeDirectory = properties.topDirectory + File.separator + properties.subdirectory

  def makeTask = newMakeTask(properties)

  def cleanTask = newCleanTask(properties)
  clean.dependsOn cleanTask

  def removeTask = tasks.register("removeNativeComponents${properties.taskNameSuffix}", Delete) {
    description "remove the ${properties.component}'s ${properties.ABI} libraries from the build"
    delete getABIPath(properties, abi)
  }.get()

  clean.dependsOn removeTask

  def libraries = properties.libs
  def jars = properties.jars

  if ((libraries != null) && !libraries.isEmpty()) {
    def addLibrariesTask = tasks.register("libNativeComponents${properties.taskNameSuffix}", Copy) {
      description "add the ${properties.component}'s ${properties.ABI} libraries to the build"
      dependsOn makeTask

      into getABIPath(properties, abi)
      from properties.makeDirectory

      libraries.each { library ->
        include "lib${library}.so"
      }
    }.get()

    addCompileDependency addLibrariesTask
  }

  if ((jars != null) && !jars.isEmpty()) {
    def addJarsTask = tasks.register("jarNativeComponents${properties.taskNameSuffix}", Copy) {
      description "add the ${properties.component}'s ${properties.ABI} jars to the build"
      dependsOn makeTask

      into getJarPath(properties)
      from properties.makeDirectory

      jars.each { jar ->
        include "${jar}.jar"
      }
    }.get()

    addCompileDependency addJarsTask
  }
}

void addNativeComponentTasks (Map properties) {
  def taskNameSuffix = "_${properties.component}"
  properties.taskNameSuffix = taskNameSuffix

  if (properties.make == null) properties.make = "all"
  if (properties.make instanceof String) properties.make = [properties.make]

  def removeTask = tasks.register("removeNativeComponents${properties.taskNameSuffix}", Delete) {
    description "remove the ${properties.component}'s jars from the build"
    delete getJarPath(properties)
  }.get()

  nativeProperties.abiList.each { abi ->
    properties.ABI = abi
    properties.taskNameSuffix = "${taskNameSuffix}_${abi}"
    properties.topDirectory = nativeProperties.abiDirectory + File.separator + abi

    properties.configureTask = newConfigureTask(properties)
    addNativeComponentTasks(properties, abi)
  }

  clean.dependsOn removeTask
}

def addTasks = { properties ->
  addNativeComponentTasks(properties)
}

ext.nativeComponentMethods = [
  addTasks: addTasks,
]
