String getProjectPath (Project project) {
  return project.projectDir.path
}

String getProjectPath (Project project, String subpath) {
  return getProjectPath(project) + File.separator + subpath
}

String getAssetsPath (Project project) {
  return getProjectPath(project, nativeProperties.assetsPath)
}

String getJarPath (Project project) {
  return getProjectPath(project, nativeProperties.jarPath)
}

String getJNIPath (Project project) {
  return getProjectPath(project, nativeProperties.jniPath)
}

String getABIPath (Project project, String abi) {
  return getJNIPath(project) + File.separator + abi
}

String getProjectPath (Map properties) {
  return getProjectPath(properties.project)
}

String getProjectPath (Map properties, String subpath) {
  return getProjectPath(properties.project, subpath)
}

String getAssetsPath (Map properties) {
  return getAssetsPath(properties.project)
}

String getJarPath (Map properties) {
  return getJarPath(properties.project)
}

String getJNIPath (Map properties) {
  return getJNIPath(properties.project)
}

String getABIPath (Map properties, String abi) {
  return getABIPath(properties.project, abi)
}

String getABIPath (Map properties) {
  return getABIPath(properties, properties.ABI)
}

Map getABI (String abi) {
  if (!nativeComponents.containsKey("ABI")) {
    nativeComponents.ABI = [:]
  }

  def ABI = nativeComponents.ABI
  if (!ABI.containsKey(abi)) ABI[abi] = [:]
  return ABI[abi]
}

Map getABI (Map properties) {
  return getABI(properties.ABI)
}

Task newAssembleTask () {
  return tasks.register("assembleNativeComponents") {
    description "assemble all of the native jars, libraries, assets, etc"
  }.get()
}

void addAssembleDependency (Task dependentTask) {
  nativeComponents.assembleTask.dependsOn dependentTask
}

Task newCleanTask () {
  return tasks.register("cleanNativeComponents") {
    description "clean all of the native jars, libraries, assets, etc"
  }.get()
}

void addCleanDependency (Task dependentTask) {
  nativeComponents.cleanTask.dependsOn dependentTask
}

Task newConfigureTask (Map properties) {
  return tasks.register("configureNativeComponents${properties.taskNameSuffix}", Exec) {
    description "configure the ${properties.component} for the ${properties.ABI} ABI"

    workingDir properties.topDirectory
    ignoreExitValue false
    commandLine "${nativeProperties.rootDirectory}/cfg-android-abi", "-q", properties.ABI
  }.get()
}

Task getConfigureTask (Map properties) {
  def abi = getABI(properties)

  if (!abi.containsKey("configureTask")) {
    abi.configureTask = newConfigureTask(properties)
  }

  return abi.configureTask
}

Task newMakeComponentsTask (Map properties) {
  return tasks.register("makeNativeComponents${properties.taskNameSuffix}", Exec) {
    description "make the ${properties.ABI} components of the ${properties.component}"
    dependsOn properties.configureTask

    workingDir properties.componentsDirectory
    ignoreExitValue false

    commandLine "make"
    args properties.make
  }.get()
}

Task newAddJarsTask (Map properties) {
  return tasks.register("jarNativeComponents${properties.taskNameSuffix}", Copy) {
    description "add the ${properties.component}'s ${properties.ABI} jars to the build"
    dependsOn properties.makeComponentsTask

    into getJarPath(properties)
    from properties.componentsDirectory

    properties.jars.each { jar ->
      include "${jar}.jar"
    }
  }.get()
}

Task newAddLibrariesTask (Map properties) {
  return tasks.register("jniNativeComponents${properties.taskNameSuffix}", Copy) {
    description "add the ${properties.component}'s ${properties.ABI} libraries to the build"
    dependsOn properties.makeComponentsTask

    def componentsDirectory =  properties.componentsDirectory
    def coreDirectory = properties.coreComponentsDirectory

    into getABIPath(properties, properties.ABI)
    from componentsDirectory

    if (!coreDirectory.equals(componentsDirectory)) {
      from coreDirectory
    }

    properties.libs.each { library ->
      include "lib${library}.so"
    }
  }.get()
}

Task newMakeCleanTask (Map properties) {
  return tasks.register("cleanNativeComponents${properties.taskNameSuffix}", Exec) {
    description "remove (make clean) the ${properties.ABI} components of the ${properties.component}"
    dependsOn properties.configureTask

    workingDir properties.componentsDirectory
    ignoreExitValue true
    commandLine "make", "clean"
  }.get()
}

Task newRemoveTask (Map properties) {
  return tasks.register("removeNativeComponents${properties.taskNameSuffix}", Delete) {
    description "remove the ${properties.component}'s jars and libraries from the build"
    delete getJarPath(properties)
    delete getJNIPath(properties)
  }.get()
}

void addNativeComponentTasks (Map properties, String abi) {
  properties.ABI = abi
  def isPrimaryABI = abi.equals(nativeProperties.abiList[0])

  properties.topDirectory = nativeProperties.abiDirectory + File.separator + properties.ABI
  properties.configureTask = getConfigureTask(properties)

  properties.componentsDirectory = properties.topDirectory + File.separator + properties.subdirectory
  properties.coreComponentsDirectory = properties.topDirectory + File.separator + nativeProperties.coreSubdirectory
  properties.makeComponentsTask = newMakeComponentsTask(properties)

  if (isPrimaryABI) {
    def jars = properties.jars

    if ((jars != null) && !jars.isEmpty()) {
      def jarsTask = newAddJarsTask(properties)
      addAssembleDependency jarsTask
    }
  }

  def libraries = properties.libs
  if ((libraries != null) && !libraries.isEmpty()) {
    def addLibrariesTask = newAddLibrariesTask(properties)
    addAssembleDependency addLibrariesTask
  }

  def makeCleanTask = newMakeCleanTask(properties)
  addCleanDependency makeCleanTask
}

void addNativeComponentTasks (Map properties) {
  def taskNameSuffix = "_${properties.component}"
  properties.taskNameSuffix = taskNameSuffix

  if (properties.make == null) properties.make = "all"
  if (properties.make instanceof String) properties.make = [properties.make]

  def removeTask = newRemoveTask(properties)
  addCleanDependency removeTask

  nativeProperties.abiList.each { abi ->
    properties.taskNameSuffix = "${taskNameSuffix}_${abi}"
    addNativeComponentTasks(properties, abi)
  }
}

ext.nativeComponents = [
  assembleTask: newAssembleTask(),
  cleanTask: newCleanTask(),

  addTasks: { Map properties ->
    addNativeComponentTasks(properties)
  },
]

clean.dependsOn nativeComponents.cleanTask
