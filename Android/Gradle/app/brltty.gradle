def assetsDirectory = brltty.getAssetsPath(project)
def driversDirectory = assetsDirectory + File.separator + "drivers"
def messagesDirectory = assetsDirectory + File.separator + "locale"
def tablesDirectory = assetsDirectory + File.separator + "tables"

ext {
  appVersionIdentifier = [
    brltty.native.rootDirectory + File.separator + "getrevid",
    brltty.native.rootDirectory
  ].execute().text.trim()
}

ext {
  appVersionName = appVersionIdentifier.replaceAll(/^.*?-(\d)/, /$1/).replaceAll(/-g.*$/, "")
}

ext {
  appVersionCode = [
    brltty.native.rootDirectory + File.separator + "getrevid",
    "-r", appVersionIdentifier, "-i",
    brltty.native.rootDirectory
  ].execute().text.trim() as int
}

task brlttyAddTables (type: Copy) {
  from brltty.native.tablesDirectory
  into tablesDirectory
  include 'Text/**/*.tt?'
  include 'Attributes/**/*.at?'
  include 'Contraction/**/*.ct?'
  include 'Keyboard/**/*.kt?'
  include 'Input/**/*.kt?'
}

task brlttyRemoveTables (type: Delete) {
  delete tablesDirectory
}

task brlttyAddDrivers (type: Copy) {
  from brltty.native.driversDirectory
  into driversDirectory
  include 'libbrlttyb??.so'
  include 'libbrlttys??.so'
  include 'libbrlttyx??.so'
}

task brlttyRemoveDrivers (type: Delete) {
  delete driversDirectory
}

tasks.register("brlttyAddMessages") {
  doLast {
    def commandProcesses = []

    try {
      def sourceDirectory = new File(brltty.native.messagesDirectory)
      def sourceFiles = layout.files {sourceDirectory.listFiles()}

      sourceFiles.each { sourceFile ->
        def sourceName = sourceFile.name

        if (sourceName.endsWith(".po")) {
          def languageCode = sourceName.replaceAll(/\..+?$/, '')
          def targetDirectory = new File(messagesDirectory + File.separator + languageCode + File.separator + "LC_MESSAGES")

          if (targetDirectory.isDirectory() || targetDirectory.mkdirs()) {
            def targetFile = new File(targetDirectory, "brltty.mo")

            def commandArguments = [
              "msgfmt", "--no-hash",
              "--output-file=" + targetFile.absolutePath,
              "--", sourceFile.absolutePath
            ]

            def commandProcess = commandArguments.execute()
            commandProcess.waitForProcessOutput(new StringBuffer(), System.err)
            commandProcesses += commandProcess
          } else {
            throw new IOException("messages directory not created: " + targetDirectory.absolutePath)
          }
        }
      }
    } finally {
      def ok = true

      commandProcesses.each { process ->
        int exitValue = process.waitFor()
        if (exitValue) ok = false
      }

      if (!ok) throw new RuntimeException("installing messages failed")
    }
  }
}

task brlttyRemoveMessages (type: Delete) {
  delete messagesDirectory
}

brltty.assembleTask.dependsOn brlttyAddDrivers, brlttyAddMessages, brlttyAddTables
brltty.cleanTask.dependsOn brlttyRemoveDrivers, brlttyRemoveMessages, brlttyRemoveTables

afterEvaluate {
  tasks.withType(JavaCompile).each { task ->
    task.dependsOn brltty.assembleTask
  }
}
